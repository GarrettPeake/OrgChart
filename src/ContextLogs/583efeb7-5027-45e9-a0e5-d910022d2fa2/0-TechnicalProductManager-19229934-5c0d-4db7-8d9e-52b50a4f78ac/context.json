[
    {
        "role": "system",
        "content": "\nYou are a highly capable **Technical Program Manager (TPM)** operating at a senior level across engineering and product teams. Your primary focus is on **high-level program direction**, **cross-functional planning**, and **delegation of execution** to the appropriate roles.\n\n---\n\n\n## Core Responsibilities\n\n- Lead and coordinate complex, cross-functional technical programs.\n- Define clear roadmaps, milestones, and delivery timelines.\n- Ensure alignment between engineering execution and business/product goals.\n- Identify and mitigate program risks early.\n- Delegate technical tasks and problem-solving to the correct owners (e.g., engineers, PMs, QA).\n\n---\n\n\n## Behavioral Principles\n\n- **Operate Strategically**: Work at the right level of abstraction. Do not micromanage technical decisions unless necessary.\n- **Delegate Effectively**: Proactively assign ownership of tasks instead of doing the work directly.\n- **Communicate Clearly**: Use precise, concise, and empathetic communication—especially in written updates or status reports.\n- **Drive Alignment**: Bring clarity to ambiguity, resolve conflicts across teams, and surface decisions that require escalation.\n- **Anticipate & Escalate**: Recognize potential issues early and raise them with context and options for resolution.\n- **Act on the intent**: The request you are given may not be perfectly formulated, but if you understand the intent, do not be pedantic. If the requester made a typo, left out a file extension, or had bad grammar, you should take liberty to assume they meant the corrected version.\n\n---\n\n\n## Your TODO List\n\nThe first thing you must do when starting a task is to update your TODO list with a comprehensive set of subtasks required to complete that task.\nYou must then complete the subtasks in order, marking a subtask as pending before you've started work, in progress when you begin work on it, and complete when you have successfully completed it.\nOnly a single subtask can be in progress at a time, meaning all prior subtasks must be complete and all further subtasks must be pending.\nUpdates to the TODO list should always be accompanied by another tool use:\n* When you create the list, the first subtask should be marked as in progress and you should use the first set of tools/functions required to make progress on that subtask\n* When you mark a subtask as complete, you should also mark the next task as in progress and use the first set of tools/functions required to make progress on that subtask\n* When you have finished the final subtask and are ready to attempt completion, you should mark the final subtask as complete and attempt completion in the same response\nYou must keep your TODO list up to date as you work to inform the requester of your subtask of your progress, you will not receive credit for progress if you do not.\nAll work you do must be attributable to a TODO list item, if additional work is needed, you can change the items on your TODO list, but you cannot modify the portion that is already marked complete. You can insert new items after the current subtask or update the progress or pending items.\n\n\n\n## Delegation\n\nAn important part of your role is determining when a task should be split up and delegating well defined sub-tasks to others to bring the task to completion.\nWhen planning your TODO list, you must consider what portions of work could be done by others and these portions should be distinct subtasks that you can complete with a single DelegateWork tool/function call.\nThis is important because if you take on the entirety of the task or read a lot of files, it's possible to become overwhelmed and forget changes you've made or what you've already read, we must avoid this by delegating.\n\n---\n\n## When Uncertain\n\n- Recommend next steps that ensure forward momentum.\n- Default to delegation: determine **who** should handle a task or decision, and assign accordingly.\n\n---\n\n## What Not to Do\n\n- Do not write code or deep technical implementations unless explicitly asked.\n- Do not micromanage how engineering executes tasks.\n- Do not assume execution responsibility unless no clear owner exists—and escalate if needed.\n- Do not engage in small talk or useless conversation, do not offer improvements to the requester, do not engage them in conversation. Be poignant and precise with all of your communications.\n\n---\n\n## Your Goal\n\n1. Analyze the given task and set clear, achievable goals to accomplish it. Prioritize these goals in a logical order.\n2. Work through these goals sequentially, delegating or utilizing available tools as necessary. Each goal should correspond to a distinct step in the project development process. You will be informed on the work completed and what's remaining as you go.\n3. Remember, you have extensive capabilities with access to a wide range of tools and people that can be used in powerful and clever ways as necessary to accomplish each goal\n4. Once you've completed the given task, you must attempt completion to present the result of the task to the requester.\n"
    },
    {
        "role": "user",
        "content": "What';s this project about?"
    },
    {
        "role": "assistant",
        "content": "",
        "tool_calls": [
            {
                "id": "toolu_vrtx_01LgXpM6kWgxePJa26uRtupq-6de8ee",
                "index": 0,
                "type": "function",
                "function": {
                    "name": "UpdateTodoList",
                    "arguments": "{\"todo_items\": [{\"title\":\"Research project context and purpose\",\"detailed_description\":\"Investigate the current project to understand its goals, scope, technology stack, and overall purpose by examining available documentation, code structure, and project files\",\"status\":\"in_progress\"}]}"
                }
            },
            {
                "id": "toolu_vrtx_01N7tyRAurWRGsoCfrU76hTR-d80337",
                "index": 1,
                "type": "function",
                "function": {
                    "name": "DelegateWork",
                    "arguments": "{\"agentId\": \"ProjectResearcher\", \"task\": \"Research and provide a comprehensive overview of this project including: 1) What the project does/its main purpose, 2) Key technologies and frameworks used, 3) Project structure and main components, 4) Any notable features or functionality, 5) Target users or use cases. Please examine all available project files, documentation, README files, package.json/requirements files, and code structure to provide a complete picture of what this project is about.\"}"
                }
            }
        ]
    },
    {
        "role": "tool",
        "content": "TODO list successfully updated",
        "tool_call_id": "toolu_vrtx_01LgXpM6kWgxePJa26uRtupq-6de8ee"
    },
    {
        "role": "tool",
        "content": "The OrgChart project is a command-line interface (CLI) application designed to manage and orchestrate interactions between various AI agents to accomplish complex tasks. It leverages a hierarchical delegation model, where higher-level agents can delegate subtasks to lower-level agents, forming a tree-like structure of execution. This approach aims to keep the context window of higher-level agents clean and focused.\n\n**1. Project Purpose:**\nThe OrgChart's main purpose is to facilitate the execution of complex tasks by breaking them down and delegating them to specialized AI agents. It provides a structured environment for agents to interact, utilize tools, and report their progress, ultimately delivering a comprehensive solution to the user's initial request.\n\n**2. Key Technologies and Frameworks Used:**\n*   **TypeScript:** The primary programming language for the application.\n*   **Node.js:** The runtime environment for the application.\n*   **Ink:** A React-based framework for building interactive command-line user interfaces.\n*   **React:** Used for building the UI components within the Ink framework.\n*   **OpenAI API Spec:** Used for making LLM (Large Language Model) calls, with current implementation pointing to OpenRouter, but designed for abstraction via `LLMProvider.ts`.\n*   **Vite:** A fast build tool for modern web projects, used here for development and building.\n*   **Vitest:** A testing framework for JavaScript/TypeScript projects.\n*   **Pino:** A very fast Node.js logger.\n*   **Mammoth.js, pdf-parse:** Libraries for parsing and extracting text from `.docx` and `.pdf` files, respectively.\n\n**3. Project Structure and Main Components:**\nThe project is organized into several key directories:\n*   **`src/`**: Contains the core application logic.\n    *   **`App.tsx`**: The main entry point of the CLI application.\n    *   **`Logger.ts`**: Handles logging within the application.\n    *   **`cli/`**: Contains components related to the command-line interface.\n        *   **`Cli.tsx`**: The main CLI component, which renders either the `StartMenu` or the `Interface`.\n        *   **`StartMenu.tsx`**: The initial menu for selecting an agent and defining a task.\n        *   **`Interface.tsx`**: The main application interface, displaying the agent tree, event stream, and command panel.\n        *   **`AgentTree.tsx`**: Renders the hierarchical structure of agents.\n        *   **`EventStream.tsx`**: Displays a real-time stream of events (tool uses, agent changes, LLM messages).\n        *   **`CommandPanel.tsx`**: Provides an input area for user commands.\n    *   **`server/`**: Contains the backend logic for agents, tools, and LLM interaction.\n        *   **`LLMProvider.ts`**: Abstraction layer for interacting with LLMs (currently OpenRouter).\n        *   **`agents/`**: Defines various AI agents with their configurations (model, prompt, tools, level).\n        *   **`tasks/`**: Contains `TaskAgent.ts`, responsible for running tasks delegated to agents.\n        *   **`tools/`**: Defines the tools that agents can utilize (e.g., `ReadFileTool`, `WriteTool`, `DelegateWorkTool`).\n        *   **`utils/`**: Utility functions for configuration, file system operations, etc.\n\n**4. Notable Features or Functionality:**\n*   **Hierarchical Agent Delegation:** Agents can delegate tasks to lower-level agents, creating a tree-like execution flow. This is a core feature that allows for complex task breakdown and efficient context management.\n*   **Interactive CLI Interface:** Built with Ink, the CLI provides a rich user experience with an interactive agent selection menu, real-time event streaming, and a visual representation of the agent hierarchy.\n*   **Real-time Event Stream:** Users can monitor the progress of tasks through a detailed event stream, showing tool uses, agent changes, and LLM messages.\n*   **Agent Tree Visualization:** A visual tree structure displays the active and completed agents, their context window usage, and API costs.\n*   **Extensible Agent and Tool System:** The architecture allows for easy addition of new agents and tools, making the system adaptable to various tasks and domains.\n*   **Cost Tracking:** The interface displays the total API cost incurred by all agents for a given task.\n*   **Context Management:** The delegation model helps in keeping the context window of higher-level agents clean, as subtasks are handled by specialized agents.\n\n**5. Target Users or Use Cases:**\nThe primary target users are individuals or teams who need to automate and manage complex, multi-step tasks that can benefit from the coordinated efforts of multiple AI agents. Potential use cases include:\n*   **Software Development:** Automating code generation, design, testing, and deployment by delegating tasks to specialized engineering agents (e.g., Frontend, Backend, UX).\n*   **Project Management:** Breaking down large projects into manageable subtasks and assigning them to appropriate agents for execution and monitoring.\n*   **Research and Analysis:** Delegating information gathering, summarization, and analysis to research agents.\n*   **Content Creation:** Orchestrating agents to generate various forms of content, from initial outlines to final drafts.\n*   **Automated Workflows:** Any scenario requiring a sequence of intelligent actions, where different AI capabilities need to be combined and coordinated.",
        "tool_call_id": "toolu_vrtx_01N7tyRAurWRGsoCfrU76hTR-d80337"
    },
    {
        "role": "assistant",
        "content": "",
        "tool_calls": [
            {
                "id": "toolu_vrtx_01Uj5Kwa2vuLvrqzyQ9Zo8F5-a0dbcc",
                "index": 0,
                "type": "function",
                "function": {
                    "name": "UpdateTodoList",
                    "arguments": "{\"todo_items\": [{\"title\":\"Research project context and purpose\",\"detailed_description\":\"Investigate the current project to understand its goals, scope, technology stack, and overall purpose by examining available documentation, code structure, and project files\",\"status\":\"completed\"}]}"
                }
            },
            {
                "id": "toolu_vrtx_017iHaqMGa8UYAvspZFQ81Ag-6903ec",
                "index": 1,
                "type": "function",
                "function": {
                    "name": "AttemptCompletion",
                    "arguments": "{\"result\": \"This is the **OrgChart project** - a sophisticated CLI application for orchestrating complex tasks through hierarchical AI agent delegation.\\n\\n**Core Purpose:** The project enables users to accomplish complex, multi-step tasks by breaking them down and delegating them to specialized AI agents in a tree-like structure. This keeps higher-level agents focused while specialized agents handle specific subtasks.\\n\\n**Key Technologies:**\\n- TypeScript/Node.js runtime\\n- Ink framework for interactive CLI interface\\n- OpenAI API integration (via OpenRouter)\\n- React for UI components\\n\\n**Main Features:**\\n- **Interactive CLI Interface** with real-time agent tree visualization\\n- **Hierarchical Agent System** with specialized roles (Engineers, Designers, Researchers, etc.)\\n- **Real-time Event Streaming** to monitor task progress\\n- **Cost Tracking** for API usage across all agents\\n- **Extensible Tool System** for file operations, delegation, and task management\\n\\n**Target Use Cases:**\\n- Software development automation (code generation, testing, deployment)\\n- Project management and task orchestration\\n- Research and analysis workflows\\n- Content creation pipelines\\n- Any complex workflow requiring coordinated AI capabilities\\n\\nThe project essentially creates an \\\"organization chart\\\" of AI agents that can collaborate intelligently to solve complex problems while maintaining clean context windows and efficient resource usage.\"}"
                }
            }
        ]
    },
    {
        "role": "tool",
        "content": "TODO list successfully updated",
        "tool_call_id": "toolu_vrtx_01Uj5Kwa2vuLvrqzyQ9Zo8F5-a0dbcc"
    },
    {
        "role": "tool",
        "content": "This is the **OrgChart project** - a sophisticated CLI application for orchestrating complex tasks through hierarchical AI agent delegation.\n\n**Core Purpose:** The project enables users to accomplish complex, multi-step tasks by breaking them down and delegating them to specialized AI agents in a tree-like structure. This keeps higher-level agents focused while specialized agents handle specific subtasks.\n\n**Key Technologies:**\n- TypeScript/Node.js runtime\n- Ink framework for interactive CLI interface\n- OpenAI API integration (via OpenRouter)\n- React for UI components\n\n**Main Features:**\n- **Interactive CLI Interface** with real-time agent tree visualization\n- **Hierarchical Agent System** with specialized roles (Engineers, Designers, Researchers, etc.)\n- **Real-time Event Streaming** to monitor task progress\n- **Cost Tracking** for API usage across all agents\n- **Extensible Tool System** for file operations, delegation, and task management\n\n**Target Use Cases:**\n- Software development automation (code generation, testing, deployment)\n- Project management and task orchestration\n- Research and analysis workflows\n- Content creation pipelines\n- Any complex workflow requiring coordinated AI capabilities\n\nThe project essentially creates an \"organization chart\" of AI agents that can collaborate intelligently to solve complex problems while maintaining clean context windows and efficient resource usage.",
        "tool_call_id": "toolu_vrtx_017iHaqMGa8UYAvspZFQ81Ag-6903ec"
    }
]